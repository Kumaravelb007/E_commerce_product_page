{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  getProfile: () => api.get('/auth/me'),\n  verifyToken: () => api.post('/auth/verify-token')\n};\n\n// Products API\nexport const productsAPI = {\n  getAll: (params = {}) => api.get('/products', {\n    params\n  }),\n  getById: id => api.get(`/products/${id}`),\n  getCategories: () => api.get('/products/categories'),\n  getSuggestions: query => api.get('/products/search/suggestions', {\n    params: {\n      q: query\n    }\n  }),\n  create: productData => {\n    // Check if productData is FormData (for file uploads)\n    if (productData instanceof FormData) {\n      return api.post('/products', productData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n    }\n    return api.post('/products', productData);\n  },\n  update: (id, productData) => {\n    // Check if productData is FormData (for file uploads)\n    if (productData instanceof FormData) {\n      return api.put(`/products/${id}`, productData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n    }\n    return api.put(`/products/${id}`, productData);\n  },\n  delete: id => api.delete(`/products/${id}`),\n  uploadImage: formData => api.post('/products/upload-image', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  })\n};\n\n// Cart API\nexport const cartAPI = {\n  get: () => api.get('/cart'),\n  addItem: (productId, quantity = 1) => api.post('/cart/add', {\n    productId,\n    quantity\n  }),\n  updateItem: (productId, quantity) => api.put('/cart/update', {\n    productId,\n    quantity\n  }),\n  removeItem: productId => api.delete(`/cart/remove/${productId}`),\n  clear: () => api.delete('/cart/clear'),\n  checkout: orderData => api.post('/cart/checkout', orderData)\n};\n\n// Users API\nexport const usersAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: userData => api.put('/users/profile', userData),\n  changePassword: passwordData => api.put('/users/change-password', passwordData),\n  getOrders: () => api.get('/users/orders'),\n  getOrder: orderId => api.get(`/users/orders/${orderId}`),\n  // Admin routes\n  getAllUsers: () => api.get('/users'),\n  getUser: userId => api.get(`/users/${userId}`),\n  updateUserRole: (userId, role) => api.put(`/users/${userId}/role`, {\n    role\n  }),\n  getAllOrders: () => api.get('/users/orders/all'),\n  updateOrderStatus: (orderId, status) => api.put(`/users/orders/${orderId}/status`, {\n    status\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","userData","post","login","credentials","getProfile","get","verifyToken","productsAPI","getAll","params","getById","id","getCategories","getSuggestions","query","q","productData","FormData","update","put","delete","uploadImage","formData","cartAPI","addItem","productId","quantity","updateItem","clear","checkout","orderData","usersAPI","updateProfile","changePassword","passwordData","getOrders","getOrder","orderId","getAllUsers","getUser","userId","updateUserRole","role","getAllOrders","updateOrderStatus"],"sources":["C:/Users/DELL/Desktop/Ecomm/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base configuration\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  getProfile: () => api.get('/auth/me'),\r\n  verifyToken: () => api.post('/auth/verify-token'),\r\n};\r\n\r\n// Products API\r\nexport const productsAPI = {\r\n  getAll: (params = {}) => api.get('/products', { params }),\r\n  getById: (id) => api.get(`/products/${id}`),\r\n  getCategories: () => api.get('/products/categories'),\r\n  getSuggestions: (query) => api.get('/products/search/suggestions', { params: { q: query } }),\r\n  create: (productData) => {\r\n    // Check if productData is FormData (for file uploads)\r\n    if (productData instanceof FormData) {\r\n      return api.post('/products', productData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n    }\r\n    return api.post('/products', productData);\r\n  },\r\n  update: (id, productData) => {\r\n    // Check if productData is FormData (for file uploads)\r\n    if (productData instanceof FormData) {\r\n      return api.put(`/products/${id}`, productData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n    }\r\n    return api.put(`/products/${id}`, productData);\r\n  },\r\n  delete: (id) => api.delete(`/products/${id}`),\r\n  uploadImage: (formData) => api.post('/products/upload-image', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  }),\r\n};\r\n\r\n// Cart API\r\nexport const cartAPI = {\r\n  get: () => api.get('/cart'),\r\n  addItem: (productId, quantity = 1) => api.post('/cart/add', { productId, quantity }),\r\n  updateItem: (productId, quantity) => api.put('/cart/update', { productId, quantity }),\r\n  removeItem: (productId) => api.delete(`/cart/remove/${productId}`),\r\n  clear: () => api.delete('/cart/clear'),\r\n  checkout: (orderData) => api.post('/cart/checkout', orderData),\r\n};\r\n\r\n// Users API\r\nexport const usersAPI = {\r\n  getProfile: () => api.get('/users/profile'),\r\n  updateProfile: (userData) => api.put('/users/profile', userData),\r\n  changePassword: (passwordData) => api.put('/users/change-password', passwordData),\r\n  getOrders: () => api.get('/users/orders'),\r\n  getOrder: (orderId) => api.get(`/users/orders/${orderId}`),\r\n  // Admin routes\r\n  getAllUsers: () => api.get('/users'),\r\n  getUser: (userId) => api.get(`/users/${userId}`),\r\n  updateUserRole: (userId, role) => api.put(`/users/${userId}/role`, { role }),\r\n  getAllOrders: () => api.get('/users/orders/all'),\r\n  updateOrderStatus: (orderId, status) => api.put(`/users/orders/${orderId}/status`, { status }),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}