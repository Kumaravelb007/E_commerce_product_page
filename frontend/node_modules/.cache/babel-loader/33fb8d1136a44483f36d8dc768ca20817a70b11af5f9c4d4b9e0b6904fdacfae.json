{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Ecomm\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: true\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        isLoading: false\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check for existing token on app load\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      if (token && user) {\n        try {\n          // Verify token with server\n          const response = await authAPI.verifyToken();\n          if (response.data.success) {\n            dispatch({\n              type: 'LOGIN_SUCCESS',\n              payload: {\n                user: JSON.parse(user),\n                token\n              }\n            });\n          } else {\n            // Token is invalid, clear storage\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            dispatch({\n              type: 'LOGOUT'\n            });\n          }\n        } catch (error) {\n          // Token verification failed, clear storage\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({\n            type: 'LOGOUT'\n          });\n        }\n      } else {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async credentials => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const response = await authAPI.login(credentials);\n      if (response.data.success) {\n        const {\n          user,\n          token\n        } = response.data.data;\n\n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user,\n            token\n          }\n        });\n        toast.success('Login successful!');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const register = async userData => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const response = await authAPI.register(userData);\n      if (response.data.success) {\n        const {\n          user,\n          token\n        } = response.data.data;\n\n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user,\n            token\n          }\n        });\n        toast.success('Registration successful!');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({\n      type: 'LOGOUT'\n    });\n    toast.success('Logged out successfully');\n  };\n  const updateUser = userData => {\n    const updatedUser = {\n      ...state.user,\n      ...userData\n    };\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: userData\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","toast","jsxDEV","_jsxDEV","AuthContext","initialState","user","token","isAuthenticated","isLoading","authReducer","state","action","type","payload","AuthProvider","children","_s","dispatch","initializeAuth","localStorage","getItem","response","verifyToken","data","success","JSON","parse","removeItem","error","login","credentials","setItem","stringify","_error$response","_error$response$data","message","register","userData","_error$response2","_error$response2$data","logout","updateUser","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/Ecomm/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { authAPI } from '../services/api';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst initialState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  isLoading: true,\r\n};\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN_SUCCESS':\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n      };\r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n      };\r\n    case 'SET_LOADING':\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n      };\r\n    case 'UPDATE_USER':\r\n      return {\r\n        ...state,\r\n        user: { ...state.user, ...action.payload },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // Check for existing token on app load\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const user = localStorage.getItem('user');\r\n\r\n      if (token && user) {\r\n        try {\r\n          // Verify token with server\r\n          const response = await authAPI.verifyToken();\r\n          if (response.data.success) {\r\n            dispatch({\r\n              type: 'LOGIN_SUCCESS',\r\n              payload: {\r\n                user: JSON.parse(user),\r\n                token,\r\n              },\r\n            });\r\n          } else {\r\n            // Token is invalid, clear storage\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n            dispatch({ type: 'LOGOUT' });\r\n          }\r\n        } catch (error) {\r\n          // Token verification failed, clear storage\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          dispatch({ type: 'LOGOUT' });\r\n        }\r\n      } else {\r\n        dispatch({ type: 'SET_LOADING', payload: false });\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const response = await authAPI.login(credentials);\r\n      \r\n      if (response.data.success) {\r\n        const { user, token } = response.data.data;\r\n        \r\n        // Store in localStorage\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        \r\n        dispatch({\r\n          type: 'LOGIN_SUCCESS',\r\n          payload: { user, token },\r\n        });\r\n        \r\n        toast.success('Login successful!');\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Login failed';\r\n      toast.error(message);\r\n      return { success: false, message };\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const response = await authAPI.register(userData);\r\n      \r\n      if (response.data.success) {\r\n        const { user, token } = response.data.data;\r\n        \r\n        // Store in localStorage\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        \r\n        dispatch({\r\n          type: 'LOGIN_SUCCESS',\r\n          payload: { user, token },\r\n        });\r\n        \r\n        toast.success('Registration successful!');\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Registration failed';\r\n      toast.error(message);\r\n      return { success: false, message };\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    dispatch({ type: 'LOGOUT' });\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const updateUser = (userData) => {\r\n    const updatedUser = { ...state.user, ...userData };\r\n    localStorage.setItem('user', JSON.stringify(updatedUser));\r\n    dispatch({ type: 'UPDATE_USER', payload: userData });\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC/E,SAASC,OAAO,QAAQ,iBAAiB;AACzC,OAAOC,KAAK,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,MAAMS,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,eAAe,EAAE,KAAK;EACtBC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,eAAe;MAClB,OAAO;QACL,GAAGF,KAAK;QACRL,IAAI,EAAEM,MAAM,CAACE,OAAO,CAACR,IAAI;QACzBC,KAAK,EAAEK,MAAM,CAACE,OAAO,CAACP,KAAK;QAC3BC,eAAe,EAAE,IAAI;QACrBC,SAAS,EAAE;MACb,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QACL,GAAGE,KAAK;QACRL,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXC,eAAe,EAAE,KAAK;QACtBC,SAAS,EAAE;MACb,CAAC;IACH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGE,KAAK;QACRF,SAAS,EAAEG,MAAM,CAACE;MACpB,CAAC;IACH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGH,KAAK;QACRL,IAAI,EAAE;UAAE,GAAGK,KAAK,CAACL,IAAI;UAAE,GAAGM,MAAM,CAACE;QAAQ;MAC3C,CAAC;IACH;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAGpB,UAAU,CAACY,WAAW,EAAEL,YAAY,CAAC;;EAE/D;EACAN,SAAS,CAAC,MAAM;IACd,MAAMoB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMZ,KAAK,GAAGa,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMf,IAAI,GAAGc,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAEzC,IAAId,KAAK,IAAID,IAAI,EAAE;QACjB,IAAI;UACF;UACA,MAAMgB,QAAQ,GAAG,MAAMtB,OAAO,CAACuB,WAAW,CAAC,CAAC;UAC5C,IAAID,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;YACzBP,QAAQ,CAAC;cACPL,IAAI,EAAE,eAAe;cACrBC,OAAO,EAAE;gBACPR,IAAI,EAAEoB,IAAI,CAACC,KAAK,CAACrB,IAAI,CAAC;gBACtBC;cACF;YACF,CAAC,CAAC;UACJ,CAAC,MAAM;YACL;YACAa,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;YAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;YAC/BV,QAAQ,CAAC;cAAEL,IAAI,EAAE;YAAS,CAAC,CAAC;UAC9B;QACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;UACd;UACAT,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;UAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;UAC/BV,QAAQ,CAAC;YAAEL,IAAI,EAAE;UAAS,CAAC,CAAC;QAC9B;MACF,CAAC,MAAM;QACLK,QAAQ,CAAC;UAAEL,IAAI,EAAE,aAAa;UAAEC,OAAO,EAAE;QAAM,CAAC,CAAC;MACnD;IACF,CAAC;IAEDK,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC,IAAI;MACFb,QAAQ,CAAC;QAAEL,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAChD,MAAMQ,QAAQ,GAAG,MAAMtB,OAAO,CAAC8B,KAAK,CAACC,WAAW,CAAC;MAEjD,IAAIT,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzB,MAAM;UAAEnB,IAAI;UAAEC;QAAM,CAAC,GAAGe,QAAQ,CAACE,IAAI,CAACA,IAAI;;QAE1C;QACAJ,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEzB,KAAK,CAAC;QACpCa,YAAY,CAACY,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAAC3B,IAAI,CAAC,CAAC;QAElDY,QAAQ,CAAC;UACPL,IAAI,EAAE,eAAe;UACrBC,OAAO,EAAE;YAAER,IAAI;YAAEC;UAAM;QACzB,CAAC,CAAC;QAEFN,KAAK,CAACwB,OAAO,CAAC,mBAAmB,CAAC;QAClC,OAAO;UAAEA,OAAO,EAAE;QAAK,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MAAA,IAAAK,eAAA,EAAAC,oBAAA;MACd,MAAMC,OAAO,GAAG,EAAAF,eAAA,GAAAL,KAAK,CAACP,QAAQ,cAAAY,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBV,IAAI,cAAAW,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI,cAAc;MAC/DnC,KAAK,CAAC4B,KAAK,CAACO,OAAO,CAAC;MACpB,OAAO;QAAEX,OAAO,EAAE,KAAK;QAAEW;MAAQ,CAAC;IACpC,CAAC,SAAS;MACRlB,QAAQ,CAAC;QAAEL,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;IACnD;EACF,CAAC;EAED,MAAMuB,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACFpB,QAAQ,CAAC;QAAEL,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAChD,MAAMQ,QAAQ,GAAG,MAAMtB,OAAO,CAACqC,QAAQ,CAACC,QAAQ,CAAC;MAEjD,IAAIhB,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzB,MAAM;UAAEnB,IAAI;UAAEC;QAAM,CAAC,GAAGe,QAAQ,CAACE,IAAI,CAACA,IAAI;;QAE1C;QACAJ,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEzB,KAAK,CAAC;QACpCa,YAAY,CAACY,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAAC3B,IAAI,CAAC,CAAC;QAElDY,QAAQ,CAAC;UACPL,IAAI,EAAE,eAAe;UACrBC,OAAO,EAAE;YAAER,IAAI;YAAEC;UAAM;QACzB,CAAC,CAAC;QAEFN,KAAK,CAACwB,OAAO,CAAC,0BAA0B,CAAC;QACzC,OAAO;UAAEA,OAAO,EAAE;QAAK,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MAAA,IAAAU,gBAAA,EAAAC,qBAAA;MACd,MAAMJ,OAAO,GAAG,EAAAG,gBAAA,GAAAV,KAAK,CAACP,QAAQ,cAAAiB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBf,IAAI,cAAAgB,qBAAA,uBAApBA,qBAAA,CAAsBJ,OAAO,KAAI,qBAAqB;MACtEnC,KAAK,CAAC4B,KAAK,CAACO,OAAO,CAAC;MACpB,OAAO;QAAEX,OAAO,EAAE,KAAK;QAAEW;MAAQ,CAAC;IACpC,CAAC,SAAS;MACRlB,QAAQ,CAAC;QAAEL,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;IACnD;EACF,CAAC;EAED,MAAM2B,MAAM,GAAGA,CAAA,KAAM;IACnBrB,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/BV,QAAQ,CAAC;MAAEL,IAAI,EAAE;IAAS,CAAC,CAAC;IAC5BZ,KAAK,CAACwB,OAAO,CAAC,yBAAyB,CAAC;EAC1C,CAAC;EAED,MAAMiB,UAAU,GAAIJ,QAAQ,IAAK;IAC/B,MAAMK,WAAW,GAAG;MAAE,GAAGhC,KAAK,CAACL,IAAI;MAAE,GAAGgC;IAAS,CAAC;IAClDlB,YAAY,CAACY,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACU,WAAW,CAAC,CAAC;IACzDzB,QAAQ,CAAC;MAAEL,IAAI,EAAE,aAAa;MAAEC,OAAO,EAAEwB;IAAS,CAAC,CAAC;EACtD,CAAC;EAED,MAAMM,KAAK,GAAG;IACZ,GAAGjC,KAAK;IACRmB,KAAK;IACLO,QAAQ;IACRI,MAAM;IACNC;EACF,CAAC;EAED,oBACEvC,OAAA,CAACC,WAAW,CAACyC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA5B,QAAA,EAChCA;EAAQ;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAChC,EAAA,CA7HWF,YAAY;AAAAmC,EAAA,GAAZnC,YAAY;AA+HzB,OAAO,MAAMoC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGxD,UAAU,CAACO,WAAW,CAAC;EACvC,IAAI,CAACiD,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}